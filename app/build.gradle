apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs.kotlin'

def configPropertiesFile = rootProject.file("config.properties")
def configProperties = new Properties()
configProperties.load(new FileInputStream(configPropertiesFile))

android {
    compileSdkVersion compileSdk
    defaultConfig {
        applicationId "com.guerra.enrico.sera"
        minSdkVersion minSdk
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildTypes {
        debug {
            buildConfigField "String", "ApiBaseUri", configProperties['ApiBaseUri']
            buildConfigField "String", "OAUTH2_CLIENT_ID", configProperties['OAUTH2_CLIENT_ID']
        }
        release {
            buildConfigField "String", "ApiBaseUri", configProperties['ApiBaseUri']
            buildConfigField "String", "OAUTH2_CLIENT_ID", configProperties['OAUTH2_CLIENT_ID']

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }

    viewBinding {
        enabled = true
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

kapt {
    generateStubs = true
}

dependencies {
    lintChecks project(":lint")

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(":base")
    implementation project(":models")
    implementation project(":domain")
    implementation project(":workers")
    implementation project(":features:splash")
    implementation project(":features:login")
    implementation project(":features:todos")
    implementation project(":features:goals")
    implementation project(":features:results")
    implementation project(":features:settings")

    implementation project(":common:resources")

    // FIXME: Workaround waiting for https://github.com/google/dagger/issues/970
    implementation project(":data")
    implementation project(":local")
    implementation project(":remote")


    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"
    implementation "com.google.android.material:material:$materialVersion"
    implementation "com.google.android:flexbox:$flexboxVersion"
    implementation "androidx.core:core-ktx:$ktxVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentVersion"
    implementation "androidx.activity:activity-ktx:$activityVersion"


    // Coroutine
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutineVersion"

    // Architecture Component

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleKtxVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleKtxVersion"

    // Navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"

    // Dagger Android
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"

    // Room
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Gson
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Work Manager
    implementation "androidx.work:work-runtime-ktx:$workManagerVersion"

    // Timber
    implementation "com.jakewharton.timber:timber:$timberVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"

    testImplementation "androidx.test:core:$testCoreVersion"
    testImplementation "androidx.arch.core:core-testing:$testArchCoreVersion"

    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$testEspresso"

    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutineVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"

    kaptTest "androidx.room:room-compiler:$roomVersion"
    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"

    // Leak canary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary"

    // Flipper
    debugImplementation "com.facebook.flipper:flipper:$flipperVersion"
    debugImplementation "com.facebook.soloader:soloader:$soloaderVersion"
    releaseImplementation "com.facebook.flipper:flipper-noop:0.33.1$flipperVersion"
}
